@page "/SignalR/BotChatter"

@using Microsoft.AspNetCore.SignalR.Client
@using MsBlazorServerPlayGround.SignalR.Hubs
@using Bogus.DataSets
@using Bogus

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRunTime

@implements IAsyncDisposable

<h3>The Bot Chatter (Blazor)</h3>

<p>
    Press <code>Open Additional Chat Window</code> button and put the new tab/window side by side with the original window.
    <code>Send Auto Chat</code> will simulate chat between both screens.
</p>

<p>
    <button class="btn btn-outline-secondary" @onclick="Send" disabled="@(!IsConnected)">Send Auto Chat</button>
    <button class="btn btn-outline-secondary" @onclick="ClearMessage">Clear Messages</button>
</p>
<p>
    <button class="btn btn-outline-info" @onclick="OpenBotChatterInNewTab">Open Additional Chat Window</button>
</p>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@(new MarkupString(message))</li>
    }
</ul>



@code {
    private HubConnection hubConnection;
    private ICollection<string> messages;
    private Internet internet;
    private Lorem lorem;

    protected override async Task OnInitializedAsync()
    {
        lorem = new Lorem();
        internet = new Internet();
        messages = new List<string>();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/botChatHub"))
            .Build();


        hubConnection.On<string, string>(BotChatHub.RECEIVE_MESSAGE, (user, message) =>
        {
            var sendMessage = $"<strong>{user}</strong>: <code>{message}</code>";
            messages.Add(sendMessage);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }


    async Task Send()
    {
        var user = internet.UserName();
        var sentence = lorem.Sentences(Randomizer.Seed.Next(1, 3));

        await hubConnection.SendAsync("SendMessage", user, sentence);
    }

    void ClearMessage() => messages.Clear();

    private async Task OpenBotChatterInNewTab() => await JsRunTime.InvokeAsync<object>("open", "/SignalR/BotChatter", "_blank"); 

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    #region IAsyncDisposable Implementation

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    #endregion IAsyncDisposable Implementation
}
